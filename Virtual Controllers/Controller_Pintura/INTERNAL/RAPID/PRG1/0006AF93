module sysdata(sysmodule)

   ! Note: This file is used to store system positions and setup world zones.



   pers tooldata tUserTool0 := [TRUE,[[0,0,0],[1,0,0,0]],[0.001,[0,0,0.001],[1,0,0,0],0,0,0]];

   pers robtarget pHomePos   := [[0,0,0],[9E+09,9E+09,9E+09,9E+09],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
   pers robtarget pMtrlChPos := [[0,0,0],[9E+09,9E+09,9E+09,9E+09],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
   pers robtarget pReadyPos  := [[0,0,0],[9E+09,9E+09,9E+09,9E+09],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
   pers robtarget pUserPos   := [[0,0,0],[9E+09,9E+09,9E+09,9E+09],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

   pers jointtarget jHomePos   := [[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];
   pers jointtarget jMtrlChPos := [[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];
   pers jointtarget jReadyPos  := [[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];
   pers jointtarget jUserPos   := [[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];

   local var wzstationary wzHomePos;
   local var wzstationary wzMtrlChPos;
   local var wzstationary wzReadyPos;
   local var wzstationary wzUserPos;

   local var pos psHomePos   := [0,0,0];
   local var pos psMtrlChPos := [0,0,0];
   local var pos psReadyPos  := [0,0,0];
   local var pos psUserPos   := [0,0,0];

   local var signaldo doHomePosAlias;
   local var signaldo doMtrlChPosAlias;
   local var signaldo doReadyPosAlias;
   local var signaldo doUserPosAlias;



   proc PowerOnWZones()
      var shapedata volHomePos;
      var shapedata volMtrlChPos;
      var shapedata volReadyPos;
      var shapedata volUserPos;

      ! AliasIO requires variables to work.
      var string stHomePos       := "doHomePos";
      var string stMtrlChangePos := "doMtrlChangePos";
      var string stReadyPos      := "doReadyPos";
      var string stUserPos       := "doUserPos";

      psHomePos   := pHomePos.trans;
      psMtrlChPos := pMtrlChPos.trans;
      psReadyPos  := pReadyPos.trans;
      psUserPos   := pUserPos.trans;

      WZSphDef \Inside, volHomePos, psHomePos, 6;
      WZSphDef \Inside, volMtrlChPos, psMtrlChPos, 6;
      WZSphDef \Inside, volReadyPos, psReadyPos, 6;
      WZSphDef \Inside, volUserPos, psUserPos, 6;

      if GetSignal("doHomePos") <> -1000000 then
         AliasIO stHomePos, doHomePosAlias;
         WZDOSet \Stat, wzHomePos \Inside, volHomePos, doHomePosAlias, 1;
      endif
      if GetSignal("doMtrlChangePos") <> -1000000 then
         AliasIO stMtrlChangePos, doMtrlChPosAlias;
         WZDOSet \Stat, wzMtrlChPos \Inside, volMtrlChPos, doMtrlChPosAlias, 1;
      endif
      if GetSignal("doReadyPos") <> -1000000 then
         AliasIO stReadyPos, doReadyPosAlias;
         WZDOSet \Stat, wzReadyPos \Inside, volReadyPos, doReadyPosAlias, 1;
      endif
      if GetSignal("doUserPos") <> -1000000 then
         AliasIO stUserPos, doUserPosAlias;
         WZDOSet \Stat, wzUserPos \Inside, volUserPos, doUserPosAlias, 1;
      endif
   endproc



   proc ConfSettingsOff()
      ConfJ \Off;
      ConfL \Off;
   endproc



endmodule
